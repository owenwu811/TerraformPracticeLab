Fequently missed Q's / unsure questions - 
5/15/2023
which directory are terraform plugins located?
.terraform/plugins

To find the ID attribute for a resource, run terraform show without arguments as terraform show shows all the details of each resource

Use a private key created in this resource in another resource of type local_file. Update key.tf with the requirements: resource name: key_details filename: /root/key.txt content: 
use a reference expression to use the attribute called private_key_pem of the pvtkey resource. 

Solution:

resource "tls_private_key" "pvtkey" {
  algorithm = "RSA"
  rsa_bits = 4096
}

resource "local_file" "key_details" {cr
  content = tls_private_key.pvtkey.private_key_pem
  filename = "/root/key.txt"
 }

Now, let's update this resource and add variables instead. Use the default value declared in the variable called jedi. the variable is a map. For argument called content, use the value of the key by the same name. and, similarly, for the argument called filename, use the value by the same name.

Solution:
resource "local_file" "jedi" {
  filename = var.jedi["filename"]
  content = var.jedi["content"]
 }
 
Resource A has a dependence on resource B but dosen’t access any of its attributes inside of its arguments:

Explicit dependency

Explanation:

Dosen’t access means that depends_on was used because you still know that there is a dependency, but it's just not accsessed inside of A's arguments, so it has to be explicity stated with a depends_on metaargument. 

-var takes the highest precedence in terraform variable definition precedence while enviornment variables take the lowest precedence.


The time static resource does not take any arguments to work. This is because it is used to generate a static timestamp that can be used as a value in other parts of the terraform configuration.
Time static resource does not create or manage any infrastructure resources.

Where is the terraform state file stored by default:

Inside of the configuration directory

To find the private ip for an address, run terraform show. an argument value is not necessary.

Terraform apply will show all the output values automatically without running terraform output.

reference expressions must have ${} if used with subsitution, similar to python formatted strings.

Create before destroy meta argument needs to be wrapped in a lifecycle block:

resource "random_string" "string" {
  length = var.length
  keepers = { length = var.length }
  lifecycle {
    create_before_destroy = true
   }
}

set(string) is a valid datatype in Terraform

Value of output variable pet-name?

terraform output pet-name

In terraform, if you use the count meta argument, elements are created as a list. This is because lists can be accessed using indexes, and count creates a fixed number of elements.

== is not a valid version constraint operator

What is the AWS command used to list all users? 

aws --endpoint http://aws:4566 iam list-users

Create a user named mary?

aws --endpoint http://aws:4566 iam create-user --user-name mary


What is the default region that has been configured for use with the AWS CLI?

cat /root/.aws/config | a more intuitive way would be "aws configure get region" command.

What is the access key id used in the configuration?

aws configure get aws_access_key_id

Now that we have a few users created, let's grant them privileges.
Let's start with mary, grant her full administrator access by making use of the policy called AdministratorAccess.
Make use of the subcommand attach-user-policy.
The ARN of the AdministratorAccess policy is arn:aws:iam::aws:policy/AdministratorAccess.

aws iam attach-user-policy --user-name mary --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --endpoint http://aws:4566 (do not forget the endpoint)

jack and jill are developers and are part of a project called project-sapphire.
Create a new IAM Group called project-sapphire-developers.
Use the subcommand create-group to create the group.

aws iam create-group --group-name project-sapphire-developers --endpoint http://aws:4566 (Use aws iam help to find subcommands, and then read the synposis)



Add the IAM users called jack and jill, who are developers to the new IAM Group called project-sapphire-developers.
Use the subcommand add-user-to-group to add users into the group.

1. aws iam add-user-to-group help
2. read synposis + copy it somewhere
 Solution: aws iam add-user-to-group --group-name project-sapphire-developers --user-name jack  --endpoint http://aws:4566 
 
 aws iam add-user-to-group --group-name project-sapphire-developers --user-name jill  --endpoint http://aws:4566 
 
 
What privileges are granted for jack and jill who are part of the group project-sapphire-developers?

Check for their permissions individually and the ones granted to the group.

aws iam list-attached-group-policies --group-name project-sapphire-developers --endpoint http://aws:4566 (use aws iam help to find the list-attached-group-policies subcommand)

aws iam list-user-policies --user-name jill --endpoint http://aws:4566  (change the name to jack to see permissions jack has. Again, aws iam help to find list-user-policies subcommand, and then aws iam list-user-policies help to find the synposis to get required arguments)


Both jack and jill need complete access to the EC2 service.
Attach the AmazonEC2FullAccess policy with the ARN: arn:aws:iam::aws:policy/AmazonEC2FullAccess to the group project-sapphire-developers.

aws iam attach-group-policy --group-name project-sapphire-developers --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --endpoint http://aws:4566


what does this error message mean: 
configuring Terraform AWS Provider: validating provider credentials: retrieving caller identity from STS: operation error STS: GetCallerIdentity, failed to resolve service endpoint, an AWS region is required, but was not found

Solution: the region is not set (aws region was required but not found)
